PARSER_BEGIN(Parser)


/** ID lister. */
import tree.*;
import environment.*;
public class Parser {

    private static Environment env = new Environment();

  /** Main entry point. */
  public static void main(String[] args) {
    Parser parser = new Parser(System.in);
    ASTNode exp;

    while (true) {
    try {
    exp = parser.Start();
    System.out.println( exp.eval(env) );
    } catch (Exception e) {
      System.out.println ("Syntax Error!");
      parser.ReInit(System.in);
    }
    }
  }

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  < DEF: "def" >
  |
  < IN: "in" >
  |
  < END: "end" >
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < EL: "\n" >
  |
  < EQUALS: "=" >
}

ASTNode Start():
{ ASTNode t; }
{
   t = Exp() <EL>
   { return t; }
}

ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term() 
                 { if (op.kind == PLUS) 
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
                 } 
               ) *
     { return t1; } 
}

ASTNode Term() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = Fact() ( ( op=<TIMES> | op=<DIV> ) t2 = Term() 
 		 {
            if (op.kind == TIMES) t1 = new ASTMult(t1, t2);
            else t1 = new ASTDiv(t1, t2);
     }
		)?
     { return t1; } 
}


ASTNode Fact() :
{ Token n; 
  ASTNode t;}
{
   ( (n=<Num> | n=<MINUS> | n =<DEF> | n = <Id> ) {
        if (n.kind == MINUS)
            t = new ASTNeg(Exp());
        else if (n.kind == Num)
            t = new ASTNum(Integer.parseInt(n.image));
        else if (n.kind == DEF)
            t = Def();
        else
            t = new ASTNum(env.find(n.image));
 }
   | <LPAR> t=Exp() <RPAR> )
   { return t; }
}

ASTNode Def() :
{   Token def, id, eq, in, end;
    ASTNode init, body, result;
} {
    id = <Id> eq = <EQUALS> init = Exp() in = <IN> body = Exp() end =<END>
{return new ASTDef(id.image, init, body, env);}
}
