/**
* MIEI
* @author Ana Josefa Matos - 49938
* @author Pedro Camponï¿½s - 50051
**/

PARSER_BEGIN(Parser)


/** ID lister. */
import tree.*;
import environment.*;
import java.lang.invoke.VarHandle;
import java.util.Collection;
import java.util.LinkedList;
public class Parser {

  /** Main entry point. */
  public static void main(String[] args) {
    Parser parser = new Parser(System.in);
    ASTNode exp;

    while (true) {
        try {
            exp = parser.Start();
            System.out.println( exp.eval(new Environment()) );
        } catch (Exception e) {
          System.out.println ("Syntax Error!");
          parser.ReInit(System.in);
        }
    }
  }
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  < DEF: "def" >
  |
  < IN: "in" >
  |
  < END: "end" >
  |
  < NEW: "new" >
  |
  < ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < NUM: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < REMAINDER: "%" >
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < EL: "\n" >
  |
  < EQUALS: "=" >
  |
  < DEREF: "!" >
  |
  < ATTR: ":=" >
  |
  < SEMI: ";" > 
}

ASTNode Start():
{ ASTNode t; }
{
   t = Exp() <EL>
   { return t; }
}

ASTNode Exp() :
{ Token op;
  ASTNode t1 = null, t2; }
{
   (     (<SEMI>)* ((< NEW > t1 = Exp()
   {
		t1 = new ASTNew(t1);

   })
   |
   (t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term() 
                 {
                    if (op.kind == PLUS)
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
                 } 
               )*)) (<SEMI>)*
   )*
               { return t1; }
      
}

ASTNode Term() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = Fact() ( ( op=<TIMES> | op=<DIV> | op=<REMAINDER> ) t2 = Fact()
 		 {
            if (op.kind == TIMES) t1 = new ASTMult(t1, t2);
            else if (op.kind == REMAINDER) t1 = new ASTRem(t1, t2);
            else t1 = new ASTDiv(t1, t2);
     }
		)*
     { return t1; } 
}


ASTNode Fact() :
{ Token n; 
  ASTNode t;}
{
   ( n = <NUM>    {t = new ASTNum(Integer.parseInt(n.image));}
   | n = <MINUS>  {t = new ASTNeg(Fact());}
   | n = <DEF>    { t = Def(); }
   | <DEREF> n = <ID> { t = new ASTDeref(n.image); }
   | n = <ID>      t = Var(n)
   | <LPAR>        t = Exp() <RPAR>)
   { return t; }
}

ASTNode Var(Token id) :
{
  ASTNode t;
}
{
  {t = new ASTVariable(id.image);} (<ATTR> {t = new ASTAttr(t, Exp());})?

  {
    return t;
  }
}

ASTNode Def() :
{   Token id;
    ASTNode init, body;
    Collection<Variable> variables = new LinkedList<Variable>();  //DO NOT REMOVE TYPE OF LIST VARIABLE FROM INSTANTIATION, PARSER DOES NOT LIKE IT
} {
    (
        (id = <ID>
        <EQUALS>
        init = Exp())
        {variables.add(new Variable(id.toString(), init));}
    )+
    <IN>
    body = Exp()
    <END>
{return new ASTDef(variables, body);}
}
