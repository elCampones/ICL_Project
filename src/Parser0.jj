/**
* MIEI
* @author Ana Josefa Matos - 49938
* @author Pedro Camponï¿½s - 50051
**/

PARSER_BEGIN(Parser)


/** ID lister. */
import tree.*;
import environment.*;
import java.lang.invoke.VarHandle;
import java.util.Collection;
import java.util.LinkedList;
public class Parser {

  /** Main entry point. */
  public static void main(String[] args) {
    Parser parser = new Parser(System.in);
    ASTNode exp;

    while (true) {
        try {
            exp = parser.Start();
            System.out.println( exp.eval(new Environment()) );
        } catch (Exception e) {
          System.out.println ("Syntax Error!");
          parser.ReInit(System.in);
        }
    }
  }
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  < DEF: "def">
  |
  < IN: "in">
  |
  < END: "end">
  |
  < NEW: "new">
  |
  < BOOL: "true" | "false" | "True" | "False">
  |
  <IF : "if">
  |
  <THEN : "then">
  |
  <ELSE : "else">
  |
  <WHILE : "while">
  |
  <DO : "do">
  |
  < ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )*>
  |
  < NUM: (["0"-"9"])+>
  |
  < PLUS : "+">
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < REMAINDER: "%">
  |
  < LPAR : "(">
  |
  < RPAR : ")">
  |
  < EL: "\n">
  |
  < EQUALS: "==">
  |
  < ATTR_ID: "=">
  |
  < DEREF: "!">
  |
  < ATTR_VAL: ":=">
  |
  < SEMI: ";">
}

ASTNode Start():
{ ASTNode t; }
{
   (<SEMI>)* t = ExpSeq() (<SEMI>)* <EL>
   { return t; }
}

/*
*   Sequence of expressions, the value returned is that of the last expression
*/
ASTNode ExpSeq() :
{
    ASTNode lastExp;
} {
    lastExp = Exp() ((<SEMI>)* lastExp = Exp())*
    {return lastExp;}
}

ASTNode Exp() :
{
    ASTNode expRes;
} {
    expRes = FunctionalExp() (
        <EQUALS>   {expRes = new ASTEquals(expRes, FunctionalExp());}   //MIGHT HAVE TO MIGRATE TO FUNCTIONAL EXP
      /*| <ATTR_VAL> {expRes = new ASTAttr(expRes, FunctionalExp());}*/
    )?
    {return expRes;}
}

/*
* Function that will return a value at the end
 */
ASTNode FunctionalExp() :
{
    ASTNode termRes;
} {
    termRes = Term() (
          <PLUS> {termRes = new ASTPlus(termRes, Term());}
        | <MINUS> {termRes = new ASTSub(termRes, Term());}
    )*
    {return termRes;}
}

ASTNode Term() :
{
    ASTNode attrRes;
} {
    attrRes = AttrOp() (
          <TIMES> {attrRes = new ASTMult(attrRes, AttrOp());}
        | <DIV> {attrRes = new ASTDiv(attrRes, AttrOp());}
        | <REMAINDER> {attrRes = new ASTRem(attrRes, AttrOp());}
    )*
    {return attrRes;}
}

ASTNode AttrOp() :
{
    ASTNode factRes;
} {
    factRes = Fact() (<ATTR_VAL> {factRes = new ASTAttr(factRes, FunctionalExp());})*
    {return factRes;}
}

ASTNode Fact() :
{ Token n; 
  ASTNode t;}
{
   ( n = <NUM>      {t = new ASTNum(Integer.parseInt(n.image));}
   | n = <BOOL>     {t = new ASTBool(n.image);}
   | n = <ID>       {t = new ASTVariable(n.image);}
   | <MINUS>            {t = new ASTNeg(Fact());}
   | <DEREF>        {t = new ASTDeref(Fact());}         //Must not be FunctionalExp() otherwise !x + !y fails
   | <NEW>          {t = new ASTNew(FunctionalExp());}
   | <WHILE> t = FunctionalExp() <DO> {t = new ASTWhile(t, ExpSeq());} <END>
   | <DEF>          t = Def()
   | <LPAR> t = ExpSeq() <RPAR>
   | <IF>           t = If())
   { return t; }
}

ASTNode Def() :
{   Token id;
    ASTNode init, body;
    Collection<Variable> variables = new LinkedList<Variable>();  //DO NOT REMOVE TYPE OF LIST VARIABLE FROM INSTANTIATION, PARSER DOES NOT LIKE IT
} {
    (id = <ID> <ATTR_ID> {variables.add(new Variable(id.toString(), FunctionalExp()));})+
    <IN>
    body = ExpSeq()
    <END>
    {return new ASTDef(variables, body);}
}

ASTNode If() :
{
    ASTNode ifRes, thenRes, elseRes;
} {
    {elseRes = new ASTVoid();}
    ifRes = FunctionalExp() <THEN> thenRes = ExpSeq() (<ELSE> elseRes = ExpSeq())? <END>
    {return new ASTIf(ifRes, thenRes, elseRes);}
}