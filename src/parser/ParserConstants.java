package parser;

/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PRINT = 4;
  /** RegularExpression Id. */
  int DEF = 5;
  /** RegularExpression Id. */
  int IN = 6;
  /** RegularExpression Id. */
  int END = 7;
  /** RegularExpression Id. */
  int NEW = 8;
  /** RegularExpression Id. */
  int BOOL = 9;
  /** RegularExpression Id. */
  int IF = 10;
  /** RegularExpression Id. */
  int THEN = 11;
  /** RegularExpression Id. */
  int ELSE = 12;
  /** RegularExpression Id. */
  int WHILE = 13;
  /** RegularExpression Id. */
  int DO = 14;
  /** RegularExpression Id. */
  int INTEGER_REF = 15;
  /** RegularExpression Id. */
  int BOOL_REF = 16;
  /** RegularExpression Id. */
  int GENERAL_REF = 17;
  /** RegularExpression Id. */
  int ID = 18;
  /** RegularExpression Id. */
  int NUM = 19;
  /** RegularExpression Id. */
  int PLUS = 20;
  /** RegularExpression Id. */
  int MINUS = 21;
  /** RegularExpression Id. */
  int TIMES = 22;
  /** RegularExpression Id. */
  int DIV = 23;
  /** RegularExpression Id. */
  int REMAINDER = 24;
  /** RegularExpression Id. */
  int LPAR = 25;
  /** RegularExpression Id. */
  int RPAR = 26;
  /** RegularExpression Id. */
  int EL = 27;
  /** RegularExpression Id. */
  int EQUALS = 28;
  /** RegularExpression Id. */
  int GREATER = 29;
  /** RegularExpression Id. */
  int GREATER_EQ = 30;
  /** RegularExpression Id. */
  int SMALLER = 31;
  /** RegularExpression Id. */
  int SMALLER_EQ = 32;
  /** RegularExpression Id. */
  int AND = 33;
  /** RegularExpression Id. */
  int OR = 34;
  /** RegularExpression Id. */
  int NOT = 35;
  /** RegularExpression Id. */
  int ATTR_ID = 36;
  /** RegularExpression Id. */
  int DEREF = 37;
  /** RegularExpression Id. */
  int ATTR_VAL = 38;
  /** RegularExpression Id. */
  int DECLARE_TYPE = 39;
  /** RegularExpression Id. */
  int SEMI = 40;
  /** RegularExpression Id. */
  int COMMA = 41;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"println\"",
    "\"def\"",
    "\"in\"",
    "\"end\"",
    "\"new\"",
    "<BOOL>",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"int\"",
    "\"bool\"",
    "\"ref\"",
    "<ID>",
    "<NUM>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"(\"",
    "\")\"",
    "\"\\n\"",
    "\"==\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"&&\"",
    "\"||\"",
    "\"~\"",
    "\"=\"",
    "\"!\"",
    "\":=\"",
    "\":\"",
    "\";\"",
    "\",\"",
  };

}
