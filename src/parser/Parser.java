package parser;/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
/** ID lister. */
import tree.*;
import environment.*;
import java.lang.invoke.VarHandle;
import java.util.Collection;
import java.util.LinkedList;
public class Parser implements ParserConstants {

  /** Main entry point. */
  public static void main(String[] args) {
    Parser parser = new Parser(System.in);
    ASTNode exp;

    while (true) {
        try {
            exp = parser.Start();
            System.out.println( exp.eval(new Environment()) );
        } catch (Exception e) {
          System.out.println ("Syntax Error!");
          parser.ReInit(System.in);
        }
    }
  }

  static final public ASTNode Start() throws ParseException {ASTNode t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMI:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(SEMI);
    }
    t = ExpSeq();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMI:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(SEMI);
    }
    jj_consume_token(EL);
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

/*
*   Sequence of expressions, the value returned is that of the last expression
*/
  static final public ASTNode ExpSeq() throws ParseException {ASTNode lastExp;
    lastExp = Exp();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEF:
      case BOOL:
      case IF:
      case WHILE:
      case ID:
      case NUM:
      case MINUS:
      case LPAR:
      case DEREF:
      case SEMI:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SEMI:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_4;
        }
        jj_consume_token(SEMI);
      }
      lastExp = Exp();
    }
{if ("" != null) return lastExp;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Exp() throws ParseException {ASTNode expRes;
    expRes = FunctionalExp();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUALS:
    case ATTR_VAL:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALS:{
        jj_consume_token(EQUALS);
expRes = new ASTEquals(expRes, FunctionalExp());
        break;
        }
      case ATTR_VAL:{
        jj_consume_token(ATTR_VAL);
expRes = new ASTAttr(expRes, FunctionalExp());
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
{if ("" != null) return expRes;}
    throw new Error("Missing return statement in function");
}

/*
* Function that will return a value at the end
 */
  static final public ASTNode FunctionalExp() throws ParseException {ASTNode termRes;
    termRes = Term();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
termRes = new ASTPlus(termRes, Term());
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
termRes = new ASTSub(termRes, Term());
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return termRes;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Term() throws ParseException {ASTNode factRes;
    factRes = Fact();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIMES:
      case DIV:
      case REMAINDER:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIMES:{
        jj_consume_token(TIMES);
factRes = new ASTMult(factRes, Fact());
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
factRes = new ASTDiv(factRes, Fact());
        break;
        }
      case REMAINDER:{
        jj_consume_token(REMAINDER);
factRes = new ASTRem(factRes, Fact());
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return factRes;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Fact() throws ParseException {Token n;
  ASTNode t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      n = jj_consume_token(NUM);
t = new ASTNum(Integer.parseInt(n.image));
      break;
      }
    case BOOL:{
      n = jj_consume_token(BOOL);
t = new ASTBool(n.image);
      break;
      }
    case ID:{
      n = jj_consume_token(ID);
t = new ASTVariable(n.image);
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
t = new ASTNeg(Fact());
      break;
      }
    case DEREF:{
      jj_consume_token(DEREF);
      n = jj_consume_token(ID);
t = new ASTDeref(n.image);
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      t = FunctionalExp();
      jj_consume_token(DO);
t = new ASTWhile(t, ExpSeq());
      jj_consume_token(END);
      break;
      }
    case DEF:{
      jj_consume_token(DEF);
      t = Def();
      break;
      }
    case LPAR:{
      jj_consume_token(LPAR);
      t = ExpSeq();
      jj_consume_token(RPAR);
      break;
      }
    case IF:{
      jj_consume_token(IF);
      t = If();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Def() throws ParseException {Token id;
    ASTNode init, body;
    Collection<Variable> variables = new LinkedList<Variable>();  //DO NOT REMOVE TYPE OF LIST VARIABLE FROM INSTANTIATION, PARSER DOES NOT LIKE IT

    label_7:
    while (true) {
      id = jj_consume_token(ID);
      jj_consume_token(ATTR_ID);
variables.add(new Variable(id.toString(), FunctionalExp()));
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_7;
      }
    }
    jj_consume_token(IN);
    body = ExpSeq();
    jj_consume_token(END);
{if ("" != null) return new ASTDef(variables, body);}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode If() throws ParseException {ASTNode ifRes, thenRes, elseRes;
elseRes = new ASTVoid();
    ifRes = FunctionalExp();
    jj_consume_token(THEN);
    thenRes = ExpSeq();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      elseRes = ExpSeq();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(END);
{if ("" != null) return new ASTIf(ifRes, thenRes, elseRes);}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x10000000,0x10000000,0x1422d310,0x10000000,0x9000000,0x9000000,0x30000,0x30000,0x1c0000,0x1c0000,0x422d310,0x4000,0x800,};
	}

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[29];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 13; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 29; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
